//Mark Mocek, Homework 1, Exercise 1, 12/5/17

Copy the question text from this question with your answers into a text file and submit it!
1.a Having following code:
int a,*p;
p=&a;
cout << p << endl;
cout << &p << endl;
cout << a << endl;
cout << &a << endl;
Why are there 2 different results? Interpret them!

The first result is the address of 'a' that was stored in the pointer 'p'.
The second result is the address of 'p' due to the operator '&'.
The third result is the data previously stored in the location that was assigned to 'a' since we did not change its value.
The fourth result is the address of 'a' due to the operator '&'.

1.b What is wrong with following code? Explain! It will compile! Still, its wrong!
void swap(int *a,int *b)
{
int *c;
*a=*c;
*a=*b;
*b=*c;
}

For example *a = 1, *b = 2, *c = undefined
The data in *a is replaced by *c, which is undefined and causes a loss in the data stored in *a.
*a is then reassigned again when the contents of *b is entered, making *a = 2.
*b is then set to undefined when it is set equal to *c resulting in *a = 2, *b = undefined, *c = undefined.
To swap *a and *b the code should be:
void swap(int *a,int *b)
{
int *c;
*c=*a;
*a=*b;
*b=*c;
}